/* Copyright 2016 Jan Dalheimer <jan@dalheimer.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "CMakeIntegration.h"

#include <QDir>
#include <QCoreApplication>

#include <iostream>

#include "CommandLineParser.h"
#include "TermUtil.h"
#include "FileSystem.h"
#include "Json.h"

#include "package/PackageDatabase.h"
#include "package/PackageGroup.h"
#include "project/Project.h"
#include "project/ProjectLockFile.h"
#include "future/AwaitTerminal.h"
#include "Requirement.h"
#include "ActionContext.h"


namespace Ralph {
namespace Integration {
namespace CMake {

DECLARE_EXCEPTION(Unsatisfied);

void cmakePath()
{
	const QVector<QDir> candidates = QVector<QDir>()
			<< QDir(__FILE__).absoluteFilePath("..")
			<< QDir(qApp->applicationDirPath()).absoluteFilePath("../lib/cmake")
			<< QDir::current().absoluteFilePath("cmake");
	for (const QDir &dir : candidates) {
		if (dir.exists("RalphFunctions.cmake") && dir.exists("RalphHelpers.cmake")) {
			std::cout << dir.absolutePath();
			return;
		}
	}
	throw Exception("Unable to find ralph cmake files, try reinstalling ralph.");
}

void cmakeLoad(const Common::CommandLine::Result &result)
{
	using namespace ClientLib;

	const QDir dir(result.argument("basedir"));

	const Project *proj = Project::load(dir);
	const ProjectLockFile lockfile{proj};

	PackageDatabase *db = awaitTerminal(PackageDatabase::create(dir.absoluteFilePath("vendor")));

	ActionContext ctxt;
	ctxt.emplace<ConfigurationContextItem>(PackageConfiguration::fromItems(result.values("config")));

	QString out = "# Automatically generated by ralph %1 on %2\n\n" % qApp->applicationVersion() % QDateTime::currentDateTime().toString();
	for (const PackageDependency &dep : proj->dependencies()) {
		// is it actually needed?
		if (dep.requirements() && !dep.requirements()->isSatisfied(ctxt)) {
			continue;
		}

		// is it available?
		if (!lockfile.contains(dep.package()) && !dep.isOptional()) {
			throw UnsatisfiedException("ralph.json has been updated. Run 'ralph project install'");
		}
		if (!dep.version().accepts(lockfile.getVersion(dep.package()))) {
			throw UnsatisfiedException("Run 'ralph project update %1'" % dep.package());
		}

		const Package *pkg = db->getPackage(dep.package(), lockfile.getVersion(dep.package()));
		if (!pkg) {
			throw UnsatisfiedException("Run 'ralph project update %1'" % dep.package());
		}

		const PackageGroup group = db->group(lockfile.getGroup(dep.package()));

		// is it actually installed?
		if (!group.isInstalled(pkg) && !dep.isOptional()) {
			throw UnsatisfiedException("Missing required package %1. Run 'ralph project install'" % dep.package());
		}

		if (pkg->paths().contains("cmake")) {
			out += QStringLiteral("# %1 %2\nlist(APPEND CMAKE_MODULE_PATH \"%3\")\nset(RALPH_PKG_PATH_%1 \"%4\")\n\n")
					% pkg->name()
					% pkg->version().toString()
					% group.installDir(pkg).absoluteFilePath(pkg->paths().value("cmake"))
					% group.installDir(pkg).absolutePath();
		}
	}

	FS::write(dir.absoluteFilePath("ralph-packages.cmake"), out.toUtf8());
}


}
}
}
